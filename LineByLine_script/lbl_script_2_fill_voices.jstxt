"use strict";
/*  
ClipByClip: A tool to practice language comprehension
Antonio Cigna 2021/2022
license MIT: you can share and modify the software, but you must include the license file 
*/
/* jshint strict: true */
/* jshint esversion: 6 */
/* jshint undef: true, unused: true */
//----------------------------------------------
var currScript = document.currentScript.src; var bar1 = currScript.lastIndexOf("\\");var bar2 = currScript.lastIndexOf("/"); 
console.log("LOADED file SCRIPT " + currScript.substring( 1+Math.max(bar1,bar2) )) ;	
//----------------------------------------------------------------------------------------
/***
// 7 undefined variables
var	voices;					// defined in def0 
var	listVox;				// defined in def0 
var	selected_lang_id;		// defined in def0 
var	voice_toUpdate_speech;	// defined in def0 
var	maxNumVoices;			// defined in def0 
var	myVoice;				// defined in def0 
var	selected_numVoices;		// defined in def0 


//** variables used elsewhere
**
var usateAltrove = [
	fill_the_voices,
	123 ];
	if (usateAltrove == 122345) console.log("123"); 
**/

//======================================	
function fill_the_voices2() { 
	
	console.log("voices.length=" + voices.length); 
	var vox;
	listVox = [];
	//selected_lang_id = selected_lang_id.toLowerCase(); 
	
	//firstly the chosen language-voice
	vox = voices[selected_voice_ix];
	 
	listVox.push( [vox.lang , vox] );  
	
	var selected_lang_region = vox.lang;
	var selected_lang2  = selected_lang_region.substr(0,2);
	
	//------------------------------------------
	// secondly the same language-region 
	for(var v2=0; v2 < voices.length; v2++) {
		vox = voices[v2];
		if (v2 == selected_voice_ix) continue; 
		
		if (selected_lang_region != vox.lang ) continue;	
		
		listVox.push( [vox.lang , vox] );  		
	}
	//---------------------------------	
	// thirdly the same language
	for(var v2=0; v2 < voices.length; v2++) {
		vox = voices[v2];
		if (selected_lang_region == vox.lang ) continue;	
		if (selected_lang2 != vox.lang.substr(0,2) ) continue;				
		listVox.push( [vox.lang , vox] );  
	}
	//---------------------------------	
	//
	for(v3=0; v3 < listVox.length; v3++) {		
		console.log(listVox[v3][1].name);
	}
	//----------------	
	var chosenIxVox=0;
	//-----------
	if (listVox.length == 0) {
		return; 
	}
	console.log("listVox length=" + listVox.length); 
	voice_toUpdate_speech = listVox[0][1];	

	
	var voxLang;
	var pVox = ""; var xbr; 
	var vv3=0; var v3;
	var idhvox, idh2, eleH; 
	totNumMyLangVoices = listVox.length;
	
	console.log("totNumMyLangVoices="+ totNumMyLangVoices);
	
	for(v3=0; v3 < listVox.length; v3++) {				
		if (v3 >= maxNumVoices) break; 
		[voxLang, myVoice] = listVox[v3] ;
		
		chosenIxVox++;	
		vv3 = (v3+1); 
		idhvox = "hvox" + vv3;
		//idh2 = "tthV"  +  vv3;
		//eleH = document.getElementById(idh2);
		//eleH.style.display = "table-row"; 
		xbr="";
		if (voxLang != pVox) {
			pVox = voxLang; 
			xbr = "<br>"; 	
		}	
		
		/**	
		if (v3 == 0) xbr="";		
		eleH.children[0].innerHTML = xbr + vv3; 
		eleH.children[1].innerHTML = xbr + myVoice.lang; 
		eleH.children[2].innerHTML = xbr + myVoice.name; 	
		eleH.children[3].innerHTML = xbr + myVoice.localService; 	
		***/	
		console.log("voice to use " +  v3 + " " + listVox[v3][1].name);     		
	}
	//-------------
	for(v3=listVox.length; v3 < maxNumVoices; v3++) {					
		vv3 = (v3+1); 
		idhvox = "hvox" + vv3;
		//document.getElementById(idhvox).style.display = "none";			
	}
	
} // end of fill_the_voices2()

//--------------------------
function fill_the_voices() { 
	
	// function called in script_9... file 
	
	fill_the_voices2();
	
	if (listVox.length < selected_numVoices) {
		console.log("" +
		  "number of voices (" + listVox.length+")  is less than found in BUILDER (" + selected_numVoices +"), " +
		  " reload the html page might help "
		  ); 
		selected_numVoices = listVox.length; 
	}	
	console.log("\nto be used selected_numVoices = " + selected_numVoices ); 
	
} // end of fill_the_voices()
//====================================== 